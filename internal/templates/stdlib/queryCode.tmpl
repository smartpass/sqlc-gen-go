

{{define "queryCodeStd"}}
type {{.InterfaceName}}Repository interface {
{{- $dbtxParam := .EmitMethodsWithDBArgument -}}
{{- range .GoQueries}}
    {{if $.OutputQuery .SourceName}}
    {{- if and (eq .Cmd ":one") ($dbtxParam) }}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error)
    {{- else if eq .Cmd ":one"}}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error)
    {{- end}}
    {{- if and (eq .Cmd ":many") ($dbtxParam) }}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error)
    {{- else if eq .Cmd ":many"}}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error)
    {{- end}}
    {{- if and (eq .Cmd ":exec") ($dbtxParam) }}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) error
    {{- else if eq .Cmd ":exec"}}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, {{.Arg.Pair}}) error
    {{- end}}
    {{- if and (eq .Cmd ":execrows") ($dbtxParam) }}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (int64, error)
    {{- else if eq .Cmd ":execrows"}}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, {{.Arg.Pair}}) (int64, error)
    {{- end}}
    {{- if and (eq .Cmd ":execlastid") ($dbtxParam) }}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (int64, error)
    {{- else if eq .Cmd ":execlastid"}}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, {{.Arg.Pair}}) (int64, error)
    {{- end}}
    {{- if and (eq .Cmd ":execresult") ($dbtxParam) }}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (sql.Result, error)
    {{- else if eq .Cmd ":execresult"}}
        {{range .Comments}}//{{.}}
        {{end -}}
        {{.ShortMethodName}}(ctx context.Context, {{.Arg.Pair}}) (sql.Result, error)
    {{- end}}
    {{- end}}
{{- end}}
}

var _ {{.InterfaceName}}Repository = (*{{.InterfaceName}}RepositoryImpl)(nil)

{{ if .EmitMethodsWithDBArgument}}
    func New{{.InterfaceName}}Repository() *{{.InterfaceName}}RepositoryImpl {
    return &{{.InterfaceName}}RepositoryImpl{}
{{- else -}}
    func New{{.InterfaceName}}Repository(db DBTX) *{{.InterfaceName}}RepositoryImpl {
    return &{{.InterfaceName}}RepositoryImpl{db: db}
{{- end}}
}

{{if .EmitPreparedQueries}}
    func Prepare(ctx context.Context, db DBTX) (*{{.InterfaceName}}RepositoryImpl, error) {
    q := {{.InterfaceName}}RepositoryImpl{db: db}
    var err error
    {{- if eq (len .GoQueries) 0 }}
        _ = err
    {{- end }}
    {{- range .GoQueries }}
        if q.{{.FieldName}}, err = db.PrepareContext(ctx, {{.ConstantName}}); err != nil {
        return nil, fmt.Errorf("error preparing query {{.MethodName}}: %w", err)
        }
    {{- end}}
    return &q, nil
    }

    func (q *{{.InterfaceName}}RepositoryImpl) Close() error {
    var err error
    {{- range .GoQueries }}
        if q.{{.FieldName}} != nil {
        if cerr := q.{{.FieldName}}.Close(); cerr != nil {
        err = fmt.Errorf("error closing {{.FieldName}}: %w", cerr)
        }
        }
    {{- end}}
    return err
    }

    func (q *{{.InterfaceName}}RepositoryImpl) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
    switch {
    case stmt != nil && q.tx != nil:
    return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
    case stmt != nil:
    return stmt.ExecContext(ctx, args...)
    default:
    return q.db.ExecContext(ctx, query, args...)
    }
    }

    func (q *{{.InterfaceName}}RepositoryImpl) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
    switch {
    case stmt != nil && q.tx != nil:
    return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
    case stmt != nil:
    return stmt.QueryContext(ctx, args...)
    default:
    return q.db.QueryContext(ctx, query, args...)
    }
    }

    func (q *{{.InterfaceName}}RepositoryImpl) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Row) {
    switch {
    case stmt != nil && q.tx != nil:
    return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
    case stmt != nil:
    return stmt.QueryRowContext(ctx, args...)
    default:
    return q.db.QueryRowContext(ctx, query, args...)
    }
    }
{{end}}

type {{.InterfaceName}}RepositoryImpl struct {
{{- if not .EmitMethodsWithDBArgument}}
    db DBTX
{{- end}}

{{- if .EmitPreparedQueries}}
    tx         *sql.Tx
    {{- range .GoQueries}}
        {{.FieldName}}  *sql.Stmt
    {{- end}}
{{- end}}
}

{{if not .EmitMethodsWithDBArgument}}
    func (q *{{.InterfaceName}}RepositoryImpl) WithTx(tx *sql.Tx) *{{.InterfaceName}}RepositoryImpl {
    return &{{.InterfaceName}}RepositoryImpl{
    db: tx,
    {{- if .EmitPreparedQueries}}
        tx: tx,
        {{- range .GoQueries}}
            {{.FieldName}}: q.{{.FieldName}},
        {{- end}}
    {{- end}}
    }
    }
{{end}}

{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.UniqueFields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{$.InterfaceName}}RepositoryImpl) {{.ShortMethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
    {{- template "queryCodeStdExec" . }}
	{{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.DefineType}}
	{{- end}}
	_, err = dbr.Load(rows, &{{.Ret.Name}})
	return {{.Ret.ReturnName}}, err
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{$.InterfaceName}}RepositoryImpl) {{.ShortMethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return nil, err
    }
    {{- if $.EmitEmptySlices}}
    items := []{{.Ret.DefineType}}{}
    {{else}}
    var items []{{.Ret.DefineType}}
    {{end -}}
    _, err = dbr.Load(rows, &items)
    return items, err
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{$.InterfaceName}}RepositoryImpl) {{.ShortMethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) error {
    {{- template "queryCodeStdExec" . }}
    return err
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{$.InterfaceName}}RepositoryImpl) {{.ShortMethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return 0, err
    }
    return result.RowsAffected()
}
{{end}}

{{if eq .Cmd ":execlastid"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{$.InterfaceName}}RepositoryImpl) {{.ShortMethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return 0, err
    }
    return result.LastInsertId()
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *{{$.InterfaceName}}RepositoryImpl) {{.ShortMethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (sql.Result, error) {
    {{- template "queryCodeStdExec" . }}
}
{{end}}

{{end}}
{{end}}
{{end}}

{{define "queryCodeStdExec"}}
    {{- if .Arg.HasSqlcSlices }}
        query := {{.ConstantName}}
        var queryParams []interface{}
        {{- if .Arg.Struct }}
            {{- $arg := .Arg }}
            {{- range .Arg.Struct.Fields }}
                {{- if .HasSqlcSlice }}
                    if len({{$arg.VariableForField .}}) > 0 {
                      for _, v := range {{$arg.VariableForField .}} {
                        queryParams = append(queryParams, v)
                      }
                      query = strings.Replace(query, "/*SLICE:{{.Column.Name}}*/?", strings.Repeat(",?", len({{$arg.VariableForField .}}))[1:], 1)
                    } else {
                      query = strings.Replace(query, "/*SLICE:{{.Column.Name}}*/?", "NULL", 1)
                    }
                {{- else }}
                  queryParams = append(queryParams, {{$arg.VariableForField .}})
                {{- end }}
            {{- end }}
        {{- else }}
            {{- /* Single argument parameter to this goroutine (they are not packed
                in a struct), because .Arg.HasSqlcSlices further up above was true,
                this section is 100% a slice (impossible to get here otherwise).
            */}}
            if len({{.Arg.Name}}) > 0 {
              for _, v := range {{.Arg.Name}} {
                queryParams = append(queryParams, v)
              }
              query = strings.Replace(query, "/*SLICE:{{.Arg.Column.Name}}*/?", strings.Repeat(",?", len({{.Arg.Name}}))[1:], 1)
            } else {
              query = strings.Replace(query, "/*SLICE:{{.Arg.Column.Name}}*/?", "NULL", 1)
            }
        {{- end }}
        {{- if emitPreparedQueries }}
        {{ queryRetval . }} {{ queryMethod . }}(ctx, nil, query, queryParams...)
        {{- else}}
        {{ queryRetval . }} {{ queryMethod . }}(ctx, query, queryParams...)
        {{- end -}}
    {{- else if emitPreparedQueries }}
        {{- queryRetval . }} {{ queryMethod . }}(ctx, q.{{.FieldName}}, {{.ConstantName}}, {{.Arg.Params}})
    {{- else}}
        {{- queryRetval . }} {{ queryMethod . }}(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end -}}
{{end}}
